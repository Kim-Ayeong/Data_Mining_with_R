xlab=expression(Y[t-2]), ylab=expression(Y[t]), type='p', pch=16)
#time lag = 3
plot(y=AR_2,x=zlag(AR_2, 3),
xlab=expression(Y[t-3]), ylab=expression(Y[t]), type='p', pch=16)
acf(AR_2)
#AR(5)
theta3 <- 0.3
theta5 <- 0.1
theta4 <- -0.2
AR_5 <- array(e[1:5])
for (i in 6:length(e)) {
AR_5[i] <- theta1*AR_5[i-1] + theta2*AR_5[i-2] + theta3*AR_5[i-3]
+ theta4*AR_5[i-4] + theta5*AR_5[i-5] + e[i]
}
plot(AR_5, xlab="", ylab="", xlim=c(0,100), ylim=c(-5,5),
type="l", col="blue")
#time lag = 1
plot(y=AR_5, x=zlag(AR_5),
xlab=expression(Y[t-1]), ylab=expression(Y[t]), type='p', pch=16)
#time lag = 2
plot(y=AR_5,x=zlag(AR_5, 2),
xlab=expression(Y[t-2]), ylab=expression(Y[t]), type='p', pch=16)
#time lag = 3
plot(y=AR_5,x=zlag(AR_5, 3),
xlab=expression(Y[t-3]), ylab=expression(Y[t]), type='p', pch=16)
rm(list = ls())
e <- rnorm(100)
plot(e, main="Autoregressive",
xlab="t", ylab="Yt", xlim=c(0,100), ylim=c(-5,5),
type="l", col="black")
#AR(1)
theta <- -0.9
AR_1 <- array(e[1])
for (i in 2:length(e)) {
AR_1[i] <- theta*AR_1[i-1] + e[i]
}
par(new=T)
plot(AR_1, xlab="", ylab="", xlim=c(0,100), ylim=c(-5,5),
type="l", col="red")
#time lag = 1
library(TSA)
plot(y=AR_1, x=zlag(AR_1),
xlab=expression(Y[t-1]), ylab=expression(Y[t]), type='p', pch=16)
#time lag = 2
plot(y=AR_1,x=zlag(AR_1, 2),
xlab=expression(Y[t-2]), ylab=expression(Y[t]), type='p', pch=16)
plot(y=AR_1, x=zlag(AR_1),
xlab=expression(Y[t-1]), ylab=expression(Y[t]), type='p', pch=16)
#time lag = 2
plot(y=AR_1,x=zlag(AR_1, 2),
xlab=expression(Y[t-2]), ylab=expression(Y[t]), type='p', pch=16)
acf(AR_1)
e <- rnorm(100)
plot(e, main="Autoregressive",
xlab="t", ylab="Yt", xlim=c(0,100), ylim=c(-5,5),
type="l", col="black")
#AR(1)
theta <- -0.9
AR_1 <- array(e[1])
for (i in 2:length(e)) {
AR_1[i] <- theta*AR_1[i-1] + e[i]
}
plot(AR_1, xlab="", ylab="", xlim=c(0,100), ylim=c(-5,5),
type="l", col="red")
#time lag = 1
library(TSA)
plot(y=AR_1, x=zlag(AR_1),
xlab=expression(Y[t-1]), ylab=expression(Y[t]), type='p', pch=16)
#time lag = 2
plot(y=AR_1,x=zlag(AR_1, 2),
xlab=expression(Y[t-2]), ylab=expression(Y[t]), type='p', pch=16)
acf(AR_1)
#AR(2)
theta1 <- 1
theta2 <- -0.6
AR_2 <- array(e[1:2])
for (i in 3:length(e)) {
AR_2[i] <- theta1*AR_2[i-1] + theta2*AR_2[i-2] + e[i]
}
plot(e, main="Autoregressive",
xlab="t", ylab="Yt", xlim=c(0,100), ylim=c(-5,5),
type="l", col="black")
par(new=T)
plot(AR_2, xlab="", ylab="", xlim=c(0,100), ylim=c(-5,5),
type="l", col="green")
#time lag = 1
plot(y=AR_2, x=zlag(AR_2),
xlab=expression(Y[t-1]), ylab=expression(Y[t]), type='p', pch=16)
#time lag = 2
plot(y=AR_2,x=zlag(AR_2, 2),
xlab=expression(Y[t-2]), ylab=expression(Y[t]), type='p', pch=16)
#time lag = 3
plot(y=AR_2,x=zlag(AR_2, 3),
xlab=expression(Y[t-3]), ylab=expression(Y[t]), type='p', pch=16)
acf(AR_2)
e <- rnorm(100)
plot(e, main="Autoregressive",
xlab="t", ylab="Yt", xlim=c(0,100), ylim=c(-5,5),
type="l", col="black")
#AR(5)
theta3 <- 0.3
theta4 <- -0.2
theta5 <- 0.1
AR_5 <- array(e[1:5])
for (i in 6:length(e)) {
AR_5[i] <- theta1*AR_5[i-1] + theta2*AR_5[i-2] + theta3*AR_5[i-3]
+ theta4*AR_5[i-4] + theta5*AR_5[i-5] + e[i]
}
par(new=T)
plot(AR_5, xlab="", ylab="", xlim=c(0,100), ylim=c(-5,5),
type="l", col="blue")
acf(AR_5)
#time lag = 1
plot(y=AR_5, x=zlag(AR_5),
xlab=expression(Y[t-1]), ylab=expression(Y[t]), type='p', pch=16)
#time lag = 2
plot(y=AR_5,x=zlag(AR_5, 2),
xlab=expression(Y[t-2]), ylab=expression(Y[t]), type='p', pch=16)
#time lag = 3
plot(y=AR_5,x=zlag(AR_5, 3),
xlab=expression(Y[t-3]), ylab=expression(Y[t]), type='p', pch=16)
#time lag = 4
plot(y=AR_5,x=zlag(AR_5, 4),
xlab=expression(Y[t-4]), ylab=expression(Y[t]), type='p', pch=16)
#time lag = 5
plot(y=Ar_5,x=zlag(AR_5, 5),
xlab=expression(Y[t-5]), ylab=expression(Y[t]), type='p', pch=16)
#time lag = 6
plot(y=AR_5,x=zlag(AR_5, 6),
xlab=expression(Y[t-6]), ylab=expression(Y[t]), type='p', pch=16)
updateR()
version
install.packages("installr")
library(installr)
updateR()
version
install.R()
version #버전 확인
x <- c(1,3,2,5
)
x = c(1,6,2)
y = c(1,4,3)
x[1] #R은 인덱스 1부터 시작
x[2:3]
length(x)
length(y)
x+y # 길이가 같은 Vector일 경우 원소별로 합할 수 있음
union(x,y) # 합집합 xUy
setdiff(x,y) # 차집합 x-y
intersect(x,y) # 교집합 x∩y
ls() # 메모리에 있는 변수와 함수 객체 리스트
rm(x,y) # 객체 x,y 삭제
rm(list=ls()) # 객체 전체 삭제
ls()
x = matrix(data=c(1,2,3,4), nrow=2, ncol=2) # number of rows=2, number of columns=2
x
x=rnorm(50) # 50 random samples from N(0,1^2)
y=x+rnorm(50,mean=50,sd=.1) # 50 random samples from N(50,0.1^2)
cor(x,y) # correlation between x and y
plot(x,y) # scatter plot 그림
plot(x,y,xlab="x-axis",ylab="y-axis",main="X vs Y")
getwd()
dev.off()
plot(xy, col=densCols(xy),xlab="x-axis",ylab="y-axis",pch=20,cex=2,main="X vs Y") # density에 따라 색 변경
xy = matrix(c(x,y),length(x),2) # length(x) * 2
plot(xy, col=densCols(xy),xlab="x-axis",ylab="y-axis",pch=20,cex=2,main="X vs Y") # density에 따라 색 변경
dev.off()
x=rnorm(1000)
y=rnorm(1000)
plot(x,y) # scatter plot 그림
#7.13
#(1)
data(english2)
#7.15
bp <- c(121.09, 120.82, 121.62, 121.39, 122.56, 126.28, 129.52, 131.35)
age <- c(22, 27, 32, 37, 42, 47, 52, 57)
blood2001m <- data.frame(bp, age)
blood2001m
#(1)
plot(bp, age)
#(1)
plot(bp, age, col=1)
#(1)
plot(bp, age, col=2)
#(1)
plot(bp, age, color=2)
#(1)
plot(bp, age, pch=1)
#(1)
plot(bp, age, pch=16)
#(1)
plot(bp, age, pch=20)
#(1)
plot(bp, age, pch=16)
#(1)
plot(age, bp, pch=16)
#(2)
blood2001m <- within(blood2001m, {
z <- ifelse(age>40, 1, 0)
agez <- (age-40)*z
})
blood2001m
fit <- lm(bp ~ age + agez, blood2001m)
summary(fit)
fit <- lm(bp ~ age + z + agez, blood2001m)
summary(fit)
fit <- lm(bp ~ age + agez, blood2001m)
summary(fit)
fit <- lm(bp ~ age + z + agez, blood2001m)
summary(fit)
#7.17
data(normaldensity)
rnorm(n, mean=0, sd=1)
#7.17
x <- rnorm(3, mean=0, sd=1)
#7.17
x <- seq(0, 3, 10)
x
#7.17
x <- seq(0, 3)
x
#7.17
x <- seq(0, 3, 0.1)
x
y <- x + rnorm(length(x), mean=0, sd=1)
y
#7.17
x <- seq(0, 3, 0.1)
y <- dnorm(x, mean=0, sd=1)
x
y
fit1 <- lm(y ~ x)
summary(fit1)
fit2 <- update(fit1, .~. + I(x^2))
summary(fit2)
fit3 <- update(fit2, .~. + I(x^3))
summary(fit3)
fit4 <- update(fit3, .~. + I(x^4))
summary(fit4)
#7.17
x <- seq(0, 3, 0.01)
y <- dnorm(x, mean=0, sd=1)
fit1 <- lm(y ~ x)
summary(fit1)
fit2 <- update(fit1, .~. + I(x^2))
summary(fit2)
fit3 <- update(fit2, .~. + I(x^3))
summary(fit3)
fit4 <- update(fit3, .~. + I(x^4))
summary(fit4)
#7.17
x <- seq(0, 3, 0.2)
y <- dnorm(x, mean=0, sd=1)
fit1 <- lm(y ~ x)
summary(fit1)
fit2 <- update(fit1, .~. + I(x^2))
summary(fit2)
fit3 <- update(fit2, .~. + I(x^3))
summary(fit3)
fit4 <- update(fit3, .~. + I(x^4))
summary(fit4)
fit5 <- update(fit4, .~. + I(x^5))
summary(fit5)
#7.17
x <- seq(0, 3, 0.1)
y <- dnorm(x, mean=0, sd=1)
fit1 <- lm(y ~ x)
summary(fit1)
fit2 <- update(fit1, .~. + I(x^2))
summary(fit2)
fit3 <- update(fit2, .~. + I(x^3))
summary(fit3)
fit4 <- update(fit3, .~. + I(x^4))
summary(fit4)
fit5 <- update(fit4, .~. + I(x^5))
summary(fit5)
#7.21
data(wrapper)
#7.21
library(rsm)
#7.21
install.packages(rsm)
#7.21
install.packages(rsm)
#7.21
install.packages(rsm())
#7.21
library(wrapper)
#7.21
install.packages(wrapper)
#7.21
coded.data(wrapper) #없음
rm(list=ls())
#7.15
bp <- c(121.09, 120.82, 121.62, 121.39, 122.56, 126.28, 129.52, 131.35)
age <- c(22, 27, 32, 37, 42, 47, 52, 57)
blood2001m <- data.frame(bp, age)
#(1)
plot(age, bp, pch=16)
#(1)
plot(age, bp, pch=16)
#(2)
blood2001m <- within(blood2001m, {
z <- ifelse(age > 40, 1, 0) #가변수
agez <- (age - 40) * z #교호작용항
})
fit <- lm(bp ~ age + agez, blood2001m)
summary(fit)
fit <- lm(bp ~ age + z + agez, blood2001m)
summary(fit)
#7.17
x <- seq(0, 3, 0.1)
y <- dnorm(x, mean=0, sd=1)
fit1 <- lm(y ~ x)
summary(fit1)
fit2 <- update(fit1, .~. + I(x^2))
summary(fit2)
fit3 <- update(fit2, .~. + I(x^3))
summary(fit3)
fit4 <- update(fit3, .~. + I(x^4))
summary(fit4)
fit5 <- update(fit4, .~. + I(x^5))
summary(fit5)
#7.21
data(wrapper) #없음
#7.21
table(wrapper$x1) #없음
#7.21
table(wrapper$x1) #없음
#(1)
library(rsm)
#(1)
install.packages(rsm)
#(1)
install.packages("rsm")
#(1)
library(rsm)
table(wrapper$x1)
#7.21
#(1)
library(rsm)
#7.21
#(1)
library(rsm)
table(wrapper$x1)
data(wrapper)
table(wrapper$X1)
table(wrappers$X1)
data(wrappers)
#7.21
#(1)
library(rsm)
table(wrapper$X1)
install.packages("DoE.wrapper")
library(DoE.wrapper)
table(wrapper$X1)
table(wrappers$X1)
table(wrapper$x1)
library(RSM)
library(rsm)
install.packages("wrapper")
library(wrapper)
table(wrapper$x1)
install.packages("Wrapper")
library(Wrapper)
#7.21
#(1)
install.packages("rsm")
install.packages("rsm")
library(rsm)
table(wrapper$x1)
setwd("C:/workspace/R/데이터마이닝/datasets")
#(a)
Auto = read.table("Auto.data", header=T, na.strings="?") # 첫번째 행을 header로 설정, ?를 결측값으로 인식
Auto = na.omit(Auto)
head(Auto) # 올바르게 읽음
#(a)
pairs(Auto)
#(b)
cor(Auto[, 1:8])
attach(Auto)
#(c)
lm.fit = lm(mpg ~ ., data=Auto)
summary(lm.fit)
lm.fit = update(lm.fit, ~.-name)
summary(lm.fit)
#(c)
lm.fit = lm(mpg ~ ., data=Auto)
lm.fit = update(lm.fit, ~.-name)
summary(lm.fit)
#(c)
lm.fit = lm(mpg ~ ., data=Auto)
lm.fit = update(lm.fit, ~.-name)
summary(lm.fit)
#(d)
plot(lm.fit)
#(d)
par(mfrow=(2, 2))
plot(lm.fit)
#(d)
par(mfrow = c(2, 2))
plot(lm.fit)
rm(list=ls())
#library("ISLR")
Auto = read.table("Auto.data", header=T, na.strings="?") # 첫번째 행을 header로 설정, ?를 결측값으로 인식
Auto = na.omit(Auto)
attach(Auto)
#(b)
cor(Auto[, names(Auto)!="name"])
#(c)
model = lm(mpg ~. -name, data = Auto)
summary(model)
#(d)
par(mfrow = c(2,2))
plot(model)
#(e)
pairs(~ displacement + horsepower + weight + acceleration, Auto)
#(e)
pairs(~ cylinders + displacement + horsepower + weight + acceleration + origin, Auto)
model = lm(mpg ~.-name + cylinders:displacement, data=Auto)
summary(model)
model = lm(mpg ~.-name + cylinders:displacement + cylinders:horsepower, data=Auto)
summary(model)
model = lm(mpg ~.-name + cylinders:displacement + displacement:weight + horsepower:acceleration, data=Auto)
summary(model)
model = lm(mpg ~.-name + cylinders:displacement + cylinders:horsepower + cylinders:weight, data=Auto)
summary(model)
model = lm(mpg ~.-name + cylinders:displacement + cylinders:horsepower +
cylinders:weight + cylinders:acceleration + cylinders:origin, data=Auto)
summary(model)
model = lm(mpg ~.-name + displacement:horsepower + displacement:weight +
displacement:acceleration + displacement:origin, data=Auto)
summary(model)
model = lm(mpg ~.-name + horsepower:weight + horsepower:acceleration + horsepower:origin, data=Auto)
summary(model)
model = lm(mpg ~.-name + weight:acceleration + weight:origin, data=Auto)
summary(model)
model = lm(mpg ~.-name + acceleration:origin, data=Auto)
summary(model)
model = lm(mpg ~.-name + cylinders:horsepower + cylinders:weight +
displacement:horsepower + displacement:weight +
horsepower:weight + horsepower:acceleration +
weight:acceleration + weight:origin +
acceleration:origin, data=Auto)
summary(model)
model = lm(mpg ~.-name + horsepower:acceleration + weight:acceleration + acceleration:origin, data=Auto)
summary(model)
#(c)
model = lm(mpg ~. -name, data = Auto)
summary(model)
model = lm(mpg ~.-name + horsepower:acceleration + weight:acceleration + acceleration:origin, data=Auto)
summary(model)
model = lm(mpg ~.-name + horsepower:acceleration + acceleration:origin, data=Auto)
summary(model)
#(c)
model = lm(mpg ~. -name, data = Auto)
summary(model)
#(e)
model = lm(mpg ~.-name + cylinders:displacement, data=Auto)
summary(model)
model = lm(mpg ~.-name + cylinders:horsepower, data=Auto); summary(model) #유의O
model = lm(mpg ~.-name + cylinders:horsepower, data=Auto); summary(model) #유의O
model = lm(mpg ~.-name + cylinders:weight, data=Auto); summary(model) #유의O
model = lm(mpg ~.-name + cylinders:acceleration, data=Auto); summary(model) #유의O
model = lm(mpg ~.-name + cylinders:origin, data=Auto); summary(model) #유의O
model = lm(mpg ~.-name + displacement:horsepower, data=Auto); summary(model) #유의X
#(e)
model = lm(mpg ~.-name + cylinders:displacement, data=Auto); summary(model, test = "F") #유의O
model = lm(mpg ~.-name + displacement:horsepower, data=Auto); summary(model) #유의X
model = lm(mpg ~.-name + displacement:weight, data=Auto); summary(model) #유의X
model = lm(mpg ~.-name + displacement:acceleration, data=Auto); summary(model) #유의X
model = lm(mpg ~.-name + displacement:origin, data=Auto); summary(model) #유의X
model = lm(mpg ~.-name + horsepower:weight, data=Auto); summary(model) #유의O
model = lm(mpg ~.-name + horsepower:acceleration, data=Auto); summary(model) #유의O
model = lm(mpg ~.-name + horsepower:origin, data=Auto); summary(model) #유의O
model = lm(mpg ~.-name + weight:acceleration, data=Auto); summary(model) #유의O
model = lm(mpg ~.-name + weight:origin, data=Auto); summary(model) #유의O
model = lm(mpg ~.-name + acceleration:origin, data=Auto); summary(model)
model = lm(mpg ~.
-name+displacement:weight, data = Auto)
model = lm(mpg ~.-name+displacement:weight, data = Auto)
summary(model)
거
model = lm(mpg ~.-name-cylinders-acceleration+year:origin+displacement:weight+
displacement:weight+acceleration:horsepower+acceleration:weight, data=Auto)
summary(model)
model = lm(mpg ~.-name + displacement:weight, data = Auto); summary(model)
model = lm(mpg ~.-name + displacement:weight, data = Auto)
summary(model)
model = lm(mpg ~.-name + displacement:cylinders + displacement:weight + acceleration:horsepower, data=Auto)
summary(model)
model = lm(mpg ~.-name + cylinders:displacement + displacement:weight + horsepower:acceleration, data=Auto)
summary(model)
model = lm(mpg ~.-name + cylinders:displacement + displacement:weight + horsepower:acceleration + year:origin, data=Auto)
summary(model)
model = lm(mpg ~.-name - cylinders - acceleration + year:origin + displacement:weight +
displacement:weight + acceleration:horsepower + acceleration:weight, data=Auto)
summary(model)
#(f)
my_lm_f = lm(mpg ~ . - name + log(weight) + sqrt(horsepower) + I(displacement^2) +
I(cylinders^2),data=Auto)
model = lm(mpg ~.-name + displacement:weight, data = Auto)
summary(model)
model = lm(mpg ~.-name + cylinders:displacement + displacement:weight + horsepower:acceleration, data=Auto)
summary(model)
model = lm(mpg ~.-name + cylinders:displacement + displacement:weight + horsepower:acceleration + year:origin, data=Auto)
summary(model)
model = lm(mpg ~.-name - cylinders - acceleration + displacement:weight + horsepower:acceleration + weight:acceleration + year:origin, data=Auto)
summary(model)
#(f)
model = lm(mpg ~. -name + I(cylinders^2) + I(displacement^2) + sqrt(horsepower) + log(weight), data=Auto)
summary(model)
